{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","latitude","setLatitude","longitude","setLongitude","numberOfCities","setNumberOfCities","cities","setCities","status","setStatus","useClipboard","hasCopied","onCopy","formatData","data","citiesQuery","i","push","name","toUpperCase","join","coordsToDecimal","coords","Number","split","substring","indexOf","className","minHeight","width","align","justifyContent","maxWidth","borderWidth","borderRadius","boxShadow","px","py","textAlign","my","isRequired","placeholder","onChange","event","currentTarget","value","aria-required","defaultValue","min","max","valueString","isLoading","loadingText","mt","onClick","preventDefault","target","style","link","fetch","then","response","json","readOnly","label","hasArrow","defaultIsOpen","closeDelay","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0e9be8fb.chunk.js","sourcesContent":["import './App.css';\nimport {\n  Box, Flex, Heading,\n  FormControl, FormLabel, Input, Button,\n  NumberInput, NumberInputField, NumberInputStepper, NumberIncrementStepper, NumberDecrementStepper,\n  Tooltip, InputGroup, InputRightElement,\n  useClipboard\n} from '@chakra-ui/react'\nimport { useState } from 'react'\n\nfunction App() {\n  const [latitude, setLatitude] = useState('')\n  const [longitude, setLongitude] = useState('')\n  const [numberOfCities, setNumberOfCities] = useState(4)\n  const [cities, setCities] = useState('')\n  const [status, setStatus] = useState(false)\n  const { hasCopied, onCopy } = useClipboard(cities)\n\n  const getData = (event) => {\n    event.preventDefault()\n    event.target.style.isLoading = true\n\n    const link = `https://nearby-cities.netlify.app/.netlify/functions/search?latitude=${latitude}&longitude=${longitude}`\n    \n    fetch(link)\n    .then(response => response.json())\n    .then(data => formatData(data))\n    \n    setStatus(true)\n  }\n  \n  const formatData = (data) => {\n    const citiesQuery = []\n    for (let i = 0; i < numberOfCities; i++) {\n      citiesQuery.push(data[i].name.toUpperCase())\n    }\n    setCities(citiesQuery.join(', '))\n    setStatus(false)\n  }\n\n  const coordsToDecimal = (coords) => {\n    const grades =Number(coords.split('¬∞')[0])\n    const minutes = Number(coords.substring(coords.indexOf('¬∞')+1, coords.indexOf(`'`)))\n    const seconds = Number(coords.substring(coords.indexOf(`'`) + 1, coords.indexOf(`\"`)))\n    \n    const decimalCoords = grades + minutes / 60 + seconds / 3600\n    return decimalCoords\n  }\n\n  return (\n    <div className=\"App\">\n      <Flex minHeight='100vh' width='full' align='center' justifyContent='center'>\n        <Box\n          maxWidth='450px'\n          borderWidth={1}\n          borderRadius={10}\n          boxShadow='lg'\n          px={4}\n          py={4}\n          textAlign='center'\n        >\n          <Box my={8}>\n              <Heading>Encontrar ciudades cercanas</Heading>\n          </Box>\n          <form>\n            <FormControl isRequired>\n              <FormLabel>Latitud: </FormLabel>\n              <Input\n                placeholder=\"Ingresa la latidud\"\n                onChange={event => setLatitude(coordsToDecimal(event.currentTarget.value))}\n              ></Input>\n            </FormControl>\n\n            <FormControl isRequired>\n              <FormLabel>Longitud: </FormLabel>\n              <Input\n                aria-required\n                placeholder='Ingresa la longitud'\n                onChange={event => setLongitude(coordsToDecimal(event.currentTarget.value))}\n              ></Input>\n            </FormControl>\n\n            <FormControl>\n              <FormLabel>Numero de ciudades: </FormLabel>\n              \n              <NumberInput\n                defaultValue={4}\n                min={1}\n                max={10}\n                onChange={valueString => setNumberOfCities(Number(valueString))}\n              >\n                <NumberInputField\n                />\n                  <NumberInputStepper>\n                    <NumberIncrementStepper />\n                    <NumberDecrementStepper/>\n                  </NumberInputStepper>\n              </NumberInput>\n              \n            </FormControl>\n\n            <Button\n              isLoading={status}\n              loadingText = 'Buscando ciudades'\n              width='full'\n              mt={4}\n              onClick={latitude && longitude ? getData : null}\n            >üîç Buscar ciudades cercanas</Button>\n          </form>\n\n            <FormLabel mt={10}>Ciudades cercanas: </FormLabel>\n\n            <InputGroup>\n              <Input readOnly value={cities} />\n              <InputRightElement>\n                <Tooltip\n                  label='Copiar al portapapeles'\n                  hasArrow\n                  defaultIsOpen\n                  closeDelay={500}>\n                <Button onClick={onCopy}>\n                  {hasCopied ? '‚úî' : 'üìã'}\n                </Button>\n              </Tooltip>\n              </InputRightElement>\n            </InputGroup>\n\n\n        </Box>\n      </Flex>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ChakraProvider } from '@chakra-ui/react';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n      <App /> \n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}