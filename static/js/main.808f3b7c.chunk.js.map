{"version":3,"sources":["components/Map.jsx","credentials.jsx","components/MapModal.jsx","App.js","reportWebVitals.js","index.js"],"names":["withScriptjs","withGoogleMap","centerPoint","markers","props","defaultZoom","defaultCenter","lat","lng","lon","label","icon","url","position","map","marker","name","labelStyle","backgroundColor","fontSize","MapModal","useDisclosure","isOpen","onOpen","onClose","isDisabled","onClick","mt","size","latitude","longitude","cities","googleMapURL","credentials","containerElement","style","height","mapElement","loadingElement","App","useState","setLatitude","setLongitude","numberOfCities","setNumberOfCities","data","setData","setCities","status","setStatus","isNewValue","setIsNewValue","useClipboard","city","toUpperCase","join","hasCopied","onCopy","checkForPrevious","coord","setState","event","formatedValue","coordsToDecimal","currentTarget","value","newValue","formatData","slice","coords","decimalCoords","Number","split","substring","indexOf","toLowerCase","includes","className","minHeight","width","align","justifyContent","maxWidth","borderWidth","borderRadius","boxShadow","px","py","textAlign","my","isRequired","mb","placeholder","onBlur","defaultValue","min","max","onChange","valueString","colorScheme","isLoading","loadingText","preventDefault","link","fetch","then","response","json","d","finally","borderColor","readOnly","hasArrow","closeDelay","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.808f3b7c.chunk.js","sourcesContent":["import React from 'react'\r\nimport {\r\n    GoogleMap,\r\n    withScriptjs,\r\n    withGoogleMap, Marker\r\n} from \"react-google-maps\"\r\n\r\nconst Map = ({centerPoint, markers, props}) => {\r\n    return(\r\n        <GoogleMap\r\n            defaultZoom={8}\r\n            defaultCenter={{lat: centerPoint.lat, lng: centerPoint.lon}}\r\n        >\r\n            <Marker\r\n                label={'Punto central'}\r\n                icon={{url:'http://maps.google.com/mapfiles/ms/icons/ylw-pushpin.png'}}\r\n                position={{lat:centerPoint.lat, lng:centerPoint.lon}}\r\n            />\r\n\r\n            {\r\n                markers.map(marker => <Marker\r\n                label={marker.name}\r\n                labelStyle={{backgroundColor:'yellow', fontSize:'32px'}}\r\n\r\n                icon={{url:'http://maps.google.com/mapfiles/ms/icons/red.png'}}\r\n                position={{lat:marker.lat, lng:marker.lon}}/>)\r\n            }\r\n        </GoogleMap>\r\n    )\r\n}\r\n\r\nexport default withScriptjs(\r\n    withGoogleMap(\r\n        Map\r\n    )\r\n)\r\n\r\n","export default {\r\n    mapsKey: \"AIzaSyAbbIxHg2wBS8UMhttTyYIypjWnD9FWFa8\"\r\n}","import {\r\n    Spinner,\r\n    Modal, ModalCloseButton, ModalContent, ModalOverlay,\r\n    useDisclosure, ModalHeader, Button\r\n} from \"@chakra-ui/react\";\r\nimport Map from \"./Map\";\r\nimport credentials from \"../credentials\";\r\n\r\nexport default function MapModal(props){\r\n    const {isOpen, onOpen, onClose} = useDisclosure()\r\n    return (\r\n        <>\r\n        <Button\r\n            isDisabled={props.isDisabled}\r\n            onClick={onOpen}\r\n            mt={4}\r\n        >Abrir mapa 🗺</Button>\r\n\r\n        <Modal isOpen={isOpen} onClose={onClose} size={'6xl'}>\r\n            <ModalOverlay/>\r\n            <ModalContent>\r\n                {/*<ModalHeader>Mapa</ModalHeader>*/}\r\n                {/*<ModalCloseButton/>*/}\r\n                <Map\r\n                    centerPoint={{\r\n                        lat:props.latitude,\r\n                        lon:props.longitude\r\n                    }}\r\n                    markers={props.cities}\r\n                    googleMapURL={`https://maps.googleapis.com/maps/api/js?v=3.exp&key=${credentials.mapsKey}`}\r\n                    containerElement={<div style={{height:'550px'}}/>}\r\n                    mapElement={<div style={{ height: `100%` }} />}\r\n                    loadingElement={<Spinner/>}\r\n                />\r\n            </ModalContent>\r\n        </Modal>\r\n        </>\r\n    )\r\n}","import './App.css';\nimport {\n  Box, Flex, Heading,\n  FormControl, FormLabel, Input, Button,\n  NumberInput, NumberInputField, NumberInputStepper, NumberIncrementStepper, NumberDecrementStepper,\n  Tooltip, InputGroup, InputRightElement,\n  useClipboard\n} from '@chakra-ui/react'\nimport { useState } from 'react'\nimport MapModal from \"./components/MapModal.jsx\"\n\nfunction App() {\n  const [latitude, setLatitude] = useState('')\n  const [longitude, setLongitude] = useState('')\n  const [numberOfCities, setNumberOfCities] = useState(4)\n  const [data, setData] = useState([])\n  const [cities, setCities] = useState([])\n  const [status, setStatus] = useState(false)\n  const [isNewValue, setIsNewValue] = useState(true)\n  const { hasCopied, onCopy } = useClipboard(cities.map(city=>city.name.toUpperCase()).join(', '))\n\n  const getData = (event) => {\n    event.preventDefault()\n\n    const link = `https://nearby-cities.netlify.app/.netlify/functions/search?latitude=${latitude}&longitude=${longitude}`\n    if(isNewValue){\n      setStatus(true)\n      fetch(link)\n        .then(response => response.json())\n        .then(d => {\n          setData(d)\n          formatData(d, numberOfCities)\n          setIsNewValue(false)\n        })\n        .finally(()=> setStatus(false))\n    } else {\n      formatData(data, numberOfCities)\n    }\n  }\n  \n  const checkForPrevious = (coord) => {\n    const setState = {longitude: setLongitude, latitude: setLatitude}\n\n    return (event) => {\n      const formatedValue = coordsToDecimal(event.currentTarget.value)\n      let newValue =  false\n\n      if(formatedValue !== coord) newValue = true\n      setState[event.currentTarget.name](formatedValue)\n      setIsNewValue(newValue)\n    }\n  }\n\n  const formatData = (data, numberOfCities) => {\n    setCities(data.slice(0, numberOfCities))\n  }\n\n  const coordsToDecimal = (coords) => {\n    const grades =Number(coords.split('°')[0])\n    const minutes = Number(coords.substring(coords.indexOf('°')+1, coords.indexOf(`'`)))\n    const seconds = Number(coords.substring(coords.indexOf(`'`) + 1, coords.indexOf(`\"`)))\n    \n    let decimalCoords = grades + minutes / 60 + seconds / 3600\n    if (coords.toLowerCase().includes('w') || coords.toLowerCase().includes('s')) decimalCoords = decimalCoords * -1\n    return decimalCoords\n  }\n\n  return (\n    <div className=\"App\">\n      <Flex minHeight='100vh' width='full' align='center'\n        justifyContent='center'\n      >\n        <Box\n          maxWidth='450px'\n          borderWidth={1}\n          borderRadius={10}\n          boxShadow='2xl'\n          px={4}\n          py={4}\n          textAlign='center'\n        >\n          <Box my={8}>\n              <Heading>Encontrar ciudades cercanas</Heading>\n          </Box>\n          <form>\n            <FormControl isRequired mb={4}>\n              <FormLabel>Latitud: </FormLabel>\n              <Input\n                name='latitude'\n                placeholder=\"Ingresa la latidud\"\n                onBlur={checkForPrevious(latitude)}\n              ></Input>\n            </FormControl>\n\n            <FormControl isRequired mb={4}>\n              <FormLabel>Longitud: </FormLabel>\n              <Input\n                name='longitude'\n                placeholder='Ingresa la longitud'\n                onBlur={checkForPrevious(longitude)}\n              ></Input>\n            </FormControl>\n\n            <FormControl>\n              <FormLabel>Numero de ciudades: </FormLabel>\n              \n              <NumberInput\n                defaultValue={4}\n                min={1}\n                max={10}\n                onChange={valueString => setNumberOfCities(Number(valueString))}\n              >\n                <NumberInputField\n                />\n                  <NumberInputStepper>\n                    <NumberIncrementStepper/>\n                    <NumberDecrementStepper/>\n                  </NumberInputStepper>\n              </NumberInput>\n              \n            </FormControl>\n\n            <Button\n              colorScheme = 'teal'\n              isLoading={status}\n              loadingText='Buscando ciudades'\n              width='full'\n              mt={4}\n              onClick={latitude && longitude ? getData : null}\n            >🔍 Buscar ciudades cercanas</Button>\n          </form>\n\n            <FormLabel mt={10}>Ciudades cercanas: </FormLabel>\n\n            <InputGroup borderColor = {status ? 'teal' : ''}>\n              <Input readOnly value={cities.map(city=>city.name.toUpperCase()).join(', ')} />\n              <InputRightElement>\n                <Tooltip\n                  label={'Copiar al portapapeles'}\n                  hasArrow\n                  closeDelay={500}>\n                  <Button onClick={onCopy}>\n                    {hasCopied ? '✔' : '📋'}\n                  </Button>\n                </Tooltip>\n              </InputRightElement>\n            </InputGroup>\n\n          <MapModal\n            latitude={latitude}\n            longitude={longitude}\n            cities={cities}\n            isDisabled={(!latitude || !longitude || !cities)}\n            mt={4}\n          />\n\n        </Box>\n      </Flex>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ChakraProvider } from '@chakra-ui/react';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n      <App /> \n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}