{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","latitude","setLatitude","longitude","setLongitude","numberOfCities","setNumberOfCities","data","setData","cities","setCities","status","setStatus","isNewValue","setIsNewValue","useClipboard","hasCopied","onCopy","checkForPrevious","coord","setState","event","formatedValue","coordsToDecimal","currentTarget","value","newValue","name","console","log","formatData","citiesQuery","map","city","toUpperCase","slice","join","coords","decimalCoords","Number","split","substring","indexOf","toLowerCase","includes","className","minHeight","width","align","justifyContent","maxWidth","borderWidth","borderRadius","boxShadow","px","py","textAlign","my","isRequired","mb","placeholder","onBlur","defaultValue","min","max","onChange","valueString","colorScheme","isLoading","loadingText","mt","onClick","preventDefault","link","fetch","then","response","json","d","finally","borderColor","readOnly","label","hasArrow","defaultIsOpen","closeDelay","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4UAsKeA,MA5Jf,WAAgB,IAAD,EACmBC,mBAAS,IAD5B,mBACNC,EADM,KACIC,EADJ,OAEqBF,mBAAS,IAF9B,mBAENG,EAFM,KAEKC,EAFL,OAG+BJ,mBAAS,GAHxC,mBAGNK,EAHM,KAGUC,EAHV,OAIWN,mBAAS,IAJpB,mBAINO,EAJM,KAIAC,EAJA,OAKeR,mBAAS,IALxB,mBAKNS,EALM,KAKEC,EALF,OAMeV,oBAAS,GANxB,mBAMNW,EANM,KAMEC,EANF,OAOuBZ,oBAAS,GAPhC,mBAONa,EAPM,KAOMC,EAPN,OAQiBC,YAAaN,GAAnCO,EARK,EAQLA,UAAWC,EARN,EAQMA,OAwBbC,EAAmB,SAACC,GACxB,IAAMC,EAAW,CAACjB,UAAWC,EAAcH,SAAUC,GAErD,OAAO,SAACmB,GACN,IAAMC,EAAgBC,EAAgBF,EAAMG,cAAcC,OACtDC,GAAY,EAEbJ,IAAkBH,IAAOO,GAAW,GACvCN,EAASC,EAAMG,cAAcG,MAAML,GACnCR,EAAcY,GACdE,QAAQC,IAAIP,KAIVQ,EAAa,SAACvB,EAAMF,GAKxB,IAAM0B,EAAcxB,EAAKyB,KAAI,SAAAC,GAAI,OAAIA,EAAKN,KAAKO,iBAAeC,MAAM,EAAG9B,GACvEK,EAAUqB,EAAYK,KAAK,QAGvBb,EAAkB,SAACc,GACvB,IAIIC,EAJUC,OAAOF,EAAOG,MAAM,QAAK,IACvBD,OAAOF,EAAOI,UAAUJ,EAAOK,QAAQ,QAAK,EAAGL,EAAOK,QAAP,OAGxB,GAFvBH,OAAOF,EAAOI,UAAUJ,EAAOK,QAAP,KAAsB,EAAGL,EAAOK,QAAP,OAEX,KAEtD,OADIL,EAAOM,cAAcC,SAAS,MAAQP,EAAOM,cAAcC,SAAS,QAAMN,IAAiC,GACxGA,GAGT,OACE,qBAAKO,UAAU,MAAf,SACE,cAAC,IAAD,CAAMC,UAAU,QAAQC,MAAM,OAAOC,MAAM,SACzCC,eAAe,SADjB,SAGE,eAAC,IAAD,CACEC,SAAS,QACTC,YAAa,EACbC,aAAc,GACdC,UAAU,MACVC,GAAI,EACJC,GAAI,EACJC,UAAU,SAPZ,UASE,cAAC,IAAD,CAAKC,GAAI,EAAT,SACI,cAAC,IAAD,4CAEJ,iCACE,eAAC,IAAD,CAAaC,YAAU,EAACC,GAAI,EAA5B,UACE,cAAC,IAAD,wBACA,cAAC,IAAD,CACEhC,KAAK,WACLiC,YAAY,qBAEZC,OAAQ3C,EAAiBjB,QAI7B,eAAC,IAAD,CAAayD,YAAU,EAACC,GAAI,EAA5B,UACE,cAAC,IAAD,yBACA,cAAC,IAAD,CACEhC,KAAK,YACLiC,YAAY,sBAEZC,OAAQ3C,EAAiBf,QAI7B,eAAC,IAAD,WACE,cAAC,IAAD,mCAEA,eAAC,IAAD,CACE2D,aAAc,EACdC,IAAK,EACLC,IAAK,GACLC,SAAU,SAAAC,GAAW,OAAI5D,EAAkBiC,OAAO2B,KAJpD,UAME,cAAC,IAAD,IAEE,eAAC,IAAD,WACE,cAAC,IAAD,IACA,cAAC,IAAD,aAMR,cAAC,IAAD,CACEC,YAAc,OACdC,UAAWzD,EACX0D,YAAY,oBACZtB,MAAM,OACNuB,GAAI,EACJC,QAAStE,GAAYE,EAtHjB,SAACkB,GACfA,EAAMmD,iBAGN,IAAMC,EAAI,+EAA2ExE,EAA3E,sBAAiGE,GACxGU,GACDD,GAAU,GACV8D,MAAMD,GACHE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJlD,QAAQC,IAAI,YACZrB,EAAQsE,GACRhD,EAAWgD,EAAGzE,GACdS,GAAc,GACdc,QAAQC,IAAIiD,MAEbC,SAAQ,kBAAKnE,GAAU,OAE1BkB,EAAWvB,EAAMF,IAoGkC,KAN7C,sDAUA,cAAC,IAAD,CAAWiE,GAAI,GAAf,iCAEA,eAAC,IAAD,CAAYU,YAAerE,EAAS,OAAS,GAA7C,UACE,cAAC,IAAD,CAAOsE,UAAQ,EAACxD,MAAOhB,IACvB,cAAC,IAAD,UACE,cAAC,IAAD,CACEyE,MAAM,yBACNC,UAAQ,EACRC,eAAa,EACbC,WAAY,IAJd,SAKA,cAAC,IAAD,CAAQd,QAAStD,EAAjB,SACGD,EAAY,SAAM,gCC7ItBsE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,SCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.f03f23bc.chunk.js","sourcesContent":["import './App.css';\nimport {\n  Box, Flex, Heading,\n  FormControl, FormLabel, Input, Button,\n  NumberInput, NumberInputField, NumberInputStepper, NumberIncrementStepper, NumberDecrementStepper,\n  Tooltip, InputGroup, InputRightElement,\n  useClipboard\n} from '@chakra-ui/react'\nimport { useState } from 'react'\n\nfunction App() {\n  const [latitude, setLatitude] = useState('')\n  const [longitude, setLongitude] = useState('')\n  const [numberOfCities, setNumberOfCities] = useState(4)\n  const [data, setData] = useState([])\n  const [cities, setCities] = useState('')\n  const [status, setStatus] = useState(false)\n  const [isNewValue, setIsNewValue] = useState(true)\n  const { hasCopied, onCopy } = useClipboard(cities)\n\n  const getData = (event) => {\n    event.preventDefault()\n    // event.target.style.isLoading = true\n\n    const link = `https://nearby-cities.netlify.app/.netlify/functions/search?latitude=${latitude}&longitude=${longitude}`\n    if(isNewValue){\n      setStatus(true)\n      fetch(link)\n        .then(response => response.json())\n        .then(d => {\n          console.log('fetching')\n          setData(d)\n          formatData(d, numberOfCities)\n          setIsNewValue(false)\n          console.log(d)\n        })\n        .finally(()=> setStatus(false))\n    } else {\n      formatData(data, numberOfCities)\n    }\n  }\n  \n  const checkForPrevious = (coord) => {\n    const setState = {longitude: setLongitude, latitude: setLatitude}\n\n    return (event) => {\n      const formatedValue = coordsToDecimal(event.currentTarget.value)\n      let newValue =  false\n\n      if(formatedValue !== coord) newValue = true\n      setState[event.currentTarget.name](formatedValue)\n      setIsNewValue(newValue)\n      console.log(formatedValue)\n    }\n  }\n\n  const formatData = (data, numberOfCities) => {\n    // const citiesQuery = []\n    // for (let i = 0; i < numberOfCities; i++) {\n    //   citiesQuery.push(data[i].name.toUpperCase())\n    // }\n    const citiesQuery = data.map(city => city.name.toUpperCase()).slice(0, numberOfCities)\n    setCities(citiesQuery.join(', '))\n  }\n\n  const coordsToDecimal = (coords) => {\n    const grades =Number(coords.split('¬∞')[0])\n    const minutes = Number(coords.substring(coords.indexOf('¬∞')+1, coords.indexOf(`'`)))\n    const seconds = Number(coords.substring(coords.indexOf(`'`) + 1, coords.indexOf(`\"`)))\n    \n    let decimalCoords = grades + minutes / 60 + seconds / 3600\n    if (coords.toLowerCase().includes('w') || coords.toLowerCase().includes('s')) decimalCoords = decimalCoords * -1\n    return decimalCoords\n  }\n\n  return (\n    <div className=\"App\">\n      <Flex minHeight='100vh' width='full' align='center'\n        justifyContent='center'\n      >\n        <Box\n          maxWidth='450px'\n          borderWidth={1}\n          borderRadius={10}\n          boxShadow='2xl'\n          px={4}\n          py={4}\n          textAlign='center'\n        >\n          <Box my={8}>\n              <Heading>Encontrar ciudades cercanas</Heading>\n          </Box>\n          <form>\n            <FormControl isRequired mb={4}>\n              <FormLabel>Latitud: </FormLabel>\n              <Input\n                name='latitude'\n                placeholder=\"Ingresa la latidud\"\n                // onBlur={event => setLatitude(coordsToDecimal(event.currentTarget.value))}\n                onBlur={checkForPrevious(latitude)}\n              ></Input>\n            </FormControl>\n\n            <FormControl isRequired mb={4}>\n              <FormLabel>Longitud: </FormLabel>\n              <Input\n                name='longitude'\n                placeholder='Ingresa la longitud'\n                // onBlur={event => setLongitude(coordsToDecimal(event.currentTarget.value))}\n                onBlur={checkForPrevious(longitude)}\n              ></Input>\n            </FormControl>\n\n            <FormControl>\n              <FormLabel>Numero de ciudades: </FormLabel>\n              \n              <NumberInput\n                defaultValue={4}\n                min={1}\n                max={10}\n                onChange={valueString => setNumberOfCities(Number(valueString))}\n              >\n                <NumberInputField\n                />\n                  <NumberInputStepper>\n                    <NumberIncrementStepper/>\n                    <NumberDecrementStepper/>\n                  </NumberInputStepper>\n              </NumberInput>\n              \n            </FormControl>\n\n            <Button\n              colorScheme = 'teal'\n              isLoading={status}\n              loadingText='Buscando ciudades'\n              width='full'\n              mt={4}\n              onClick={latitude && longitude ? getData : null}\n            >üîç Buscar ciudades cercanas</Button>\n          </form>\n\n            <FormLabel mt={10}>Ciudades cercanas: </FormLabel>\n\n            <InputGroup borderColor = {status ? 'teal' : ''}>\n              <Input readOnly value={cities} />\n              <InputRightElement>\n                <Tooltip\n                  label='Copiar al portapapeles'\n                  hasArrow\n                  defaultIsOpen\n                  closeDelay={500}>\n                <Button onClick={onCopy}>\n                  {hasCopied ? '‚úî' : 'üìã'}\n                </Button>\n              </Tooltip>\n              </InputRightElement>\n            </InputGroup>\n\n\n        </Box>\n      </Flex>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ChakraProvider } from '@chakra-ui/react';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n      <App /> \n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}